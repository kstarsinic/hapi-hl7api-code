/*
 * This class is an auto-generated source file for a HAPI
 * HL7 v2.x standard structure class.
 *
 * For more information, visit: http://hl7api.sourceforge.net/
 */

package ${basePackageName}datatype;

import ca.uhn.hl7v2.model.Composite;
import ca.uhn.hl7v2.model.DataTypeException;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.model.Type;
import ca.uhn.hl7v2.model.AbstractType;
import ca.uhn.log.HapiLogFactory;

/**
 * <p>Represents an HL7 ${datatypeName} (${description}) data type. 
 * This type consists of the following components:</p>
 * <ul>
#foreach ( $component in $components )
 * <li>${component.name} (${component.type})
#end
 * </ul>
 */
public class ${datatypeName} extends AbstractType implements Composite {

    private Type[] data;

    /** 
     * Creates a new ${datatypeName} type
     */
    public ${datatypeName}(Message message) {
        super(message);
        init();
    }

    private void init() {
        data = new Type[${components.size()}];    
#foreach ( $component in $components)
#set ( $idx = ${velocityCount} - 1 )
#if (${component.idType})
        data[${idx}] = new ${component.type}(getMessage(), ${component.table});
#else
        data[${idx}] = new ${component.type}(getMessage());
#end
#end
    }


    /**
     * Returns an array containing the data elements.
     */
    public Type[] getComponents() { 
        return this.data; 
    }

    /**
     * Returns an individual data component.
     *
     * @param number The component number (0-indexed)
     * @throws DataTypeException if the given element number is out of range.
     */
    public Type getComponent(int number) throws DataTypeException { 

        try { 
            return this.data[number]; 
        } catch (ArrayIndexOutOfBoundsException e) { 
            throw new DataTypeException("Element " + number + " doesn't exist in 9 element LA1 composite"); 
        } 
    } 


#foreach ( $component in $components )
#set ( $idx = ${velocityCount} - 1 )
    /**
     * Returns ${component.name} (component #${idx}).  This is a convenience method that saves you from 
     * casting and handling an exception.
     */
    public ${component.type} get${component.accessorName}() {
       ${component.type} ret = null;
       try {
          ret = (${component.type})getComponent(${idx});
       } catch (DataTypeException e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected problem accessing known data type component - this is a bug.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    
    /**
     * Returns ${component.name} (component #${idx}).  This is a convenience method that saves you from 
     * casting and handling an exception.
     */
    public ${component.type} get${component.alternateAccessorName}() {
       ${component.type} ret = null;
       try {
          ret = (${component.type})getComponent(${idx});
       } catch (DataTypeException e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected problem accessing known data type component - this is a bug.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }


#end

}

