/*
 * This class is an auto-generated source file for a HAPI
 * HL7 v2.x standard structure class.
 *
 * For more information, visit: http://hl7api.sourceforge.net/
 */

package ${basePackageName}.message;

import ${basePackageName}.group.*;
import ${basePackageName}.segment.*;

import ca.uhn.log.HapiLogFactory;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.parser.ModelClassFactory;
import ca.uhn.hl7v2.parser.DefaultModelClassFactory;
import ca.uhn.hl7v2.model.AbstractMessage;

/**
 * <p>Represents a ADT_A01 message structure (see chapter 3.3.1). This structure contains the 
 * following elements: </p>
#foreach ( $segment in $segments )
 * ${$velocityCount - 1}: 
#end
 * 0: MSH (Message Header) <b></b><br>
 * 1: SFT (Software Segment) <b>optional repeating</b><br>
 * 2: EVN (Event Type) <b></b><br>
 * 3: PID (Patient Identification) <b></b><br>
 * 4: PD1 (Patient Additional Demographic) <b>optional </b><br>
 * 5: ROL (Role) <b>optional repeating</b><br>
 * 6: NK1 (Next of Kin / Associated Parties) <b>optional repeating</b><br>
 * 7: PV1 (Patient Visit) <b></b><br>
 * 8: PV2 (Patient Visit - Additional Information) <b>optional </b><br>
 * 9: ROL (Role) <b>optional repeating</b><br>
 * 10: DB1 (Disability) <b>optional repeating</b><br>
 * 11: OBX (Observation/Result) <b>optional repeating</b><br>
 * 12: AL1 (Patient Allergy Information) <b>optional repeating</b><br>
 * 13: DG1 (Diagnosis) <b>optional repeating</b><br>
 * 14: DRG (Diagnosis Related Group) <b>optional </b><br>
 * 15: ADT_A01_PROCEDURE (a Group object) <b>optional repeating</b><br>
 * 16: GT1 (Guarantor) <b>optional repeating</b><br>
 * 17: ADT_A01_INSURANCE (a Group object) <b>optional repeating</b><br>
 * 18: ACC (Accident) <b>optional </b><br>
 * 19: UB1 (UB82) <b>optional </b><br>
 * 20: UB2 (UB92 Data) <b>optional </b><br>
 * 21: PDA (Patient Death and Autopsy) <b>optional </b><br>
 */
public class ADT_A01 extends AbstractMessage  {

    /** 
     * Creates a new ADT_A01 Group with custom ModelClassFactory.
     */
    public ADT_A01(ModelClassFactory factory) {
       super(factory);
       init(factory);
    }

    /**
     * Creates a new ADT_A01 Group with DefaultModelClassFactory. 
     */ 
    public ADT_A01() { 
       super(new DefaultModelClassFactory());
       init(new DefaultModelClassFactory());
    }

    private void init(ModelClassFactory factory) {
       try {
          this.add(MSH.class, true, false);
          this.add(SFT.class, false, true);
          this.add(EVN.class, true, false);
          this.add(PID.class, true, false);
          this.add(PD1.class, false, false);
          this.add(ROL.class, false, true);
          this.add(NK1.class, false, true);
          this.add(PV1.class, true, false);
          this.add(PV2.class, false, false);
          this.add(ROL.class, false, true);
          this.add(DB1.class, false, true);
          this.add(OBX.class, false, true);
          this.add(AL1.class, false, true);
          this.add(DG1.class, false, true);
          this.add(DRG.class, false, false);
          this.add(ADT_A01_PROCEDURE.class, false, true);
          this.add(GT1.class, false, true);
          this.add(ADT_A01_INSURANCE.class, false, true);
          this.add(ACC.class, false, false);
          this.add(UB1.class, false, false);
          this.add(UB2.class, false, false);
          this.add(PDA.class, false, false);
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error creating ADT_A01 - this is probably a bug in the source code generator.", e);
       }
    }

    /** {@inheritDoc} */
    public String getVersion() {
       return "2.5.1";
    }

    /**
     * Returns MSH (Message Header) - creates it if necessary
     */
    public MSH getMSH() { 
       MSH ret = null;
       try {
          ret = (MSH)this.get("MSH");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns  first repetition of SFT (Software Segment) - creates it if necessary
     */
    public SFT getSFT() { 
       SFT ret = null;
       try {
          ret = (SFT)this.get("SFT");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of SFT
     * (Software Segment) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public SFT getSFT(int rep) throws HL7Exception { 
       return (SFT)this.get("SFT", rep);
    }

    /** 
     * Returns the number of existing repetitions of SFT 
     */ 
    public int getSFTReps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("SFT").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of SFT
     * (Software Segment)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertSFT(SFT structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of SFT
     * (Software Segment)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public SFT insertSFT(int rep) throws HL7Exception { 
       return (SFT)super.insertRepetition("SFT", rep);
    }

    /**
     * Removes a specific repetition of SFT
     * (Software Segment)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public SFT removeSFT(int rep) throws HL7Exception { 
       return (SFT)super.removeRepetition("SFT", rep);
    }

    /**
     * Returns EVN (Event Type) - creates it if necessary
     */
    public EVN getEVN() { 
       EVN ret = null;
       try {
          ret = (EVN)this.get("EVN");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns PID (Patient Identification) - creates it if necessary
     */
    public PID getPID() { 
       PID ret = null;
       try {
          ret = (PID)this.get("PID");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns PD1 (Patient Additional Demographic) - creates it if necessary
     */
    public PD1 getPD1() { 
       PD1 ret = null;
       try {
          ret = (PD1)this.get("PD1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns  first repetition of ROL (Role) - creates it if necessary
     */
    public ROL getROL() { 
       ROL ret = null;
       try {
          ret = (ROL)this.get("ROL");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of ROL
     * (Role) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public ROL getROL(int rep) throws HL7Exception { 
       return (ROL)this.get("ROL", rep);
    }

    /** 
     * Returns the number of existing repetitions of ROL 
     */ 
    public int getROLReps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("ROL").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of ROL
     * (Role)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertROL(ROL structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of ROL
     * (Role)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public ROL insertROL(int rep) throws HL7Exception { 
       return (ROL)super.insertRepetition("ROL", rep);
    }

    /**
     * Removes a specific repetition of ROL
     * (Role)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public ROL removeROL(int rep) throws HL7Exception { 
       return (ROL)super.removeRepetition("ROL", rep);
    }

    /**
     * Returns  first repetition of NK1 (Next of Kin / Associated Parties) - creates it if necessary
     */
    public NK1 getNK1() { 
       NK1 ret = null;
       try {
          ret = (NK1)this.get("NK1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of NK1
     * (Next of Kin / Associated Parties) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public NK1 getNK1(int rep) throws HL7Exception { 
       return (NK1)this.get("NK1", rep);
    }

    /** 
     * Returns the number of existing repetitions of NK1 
     */ 
    public int getNK1Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("NK1").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of NK1
     * (Next of Kin / Associated Parties)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertNK1(NK1 structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of NK1
     * (Next of Kin / Associated Parties)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public NK1 insertNK1(int rep) throws HL7Exception { 
       return (NK1)super.insertRepetition("NK1", rep);
    }

    /**
     * Removes a specific repetition of NK1
     * (Next of Kin / Associated Parties)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public NK1 removeNK1(int rep) throws HL7Exception { 
       return (NK1)super.removeRepetition("NK1", rep);
    }

    /**
     * Returns PV1 (Patient Visit) - creates it if necessary
     */
    public PV1 getPV1() { 
       PV1 ret = null;
       try {
          ret = (PV1)this.get("PV1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns PV2 (Patient Visit - Additional Information) - creates it if necessary
     */
    public PV2 getPV2() { 
       PV2 ret = null;
       try {
          ret = (PV2)this.get("PV2");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns  first repetition of ROL2 (Role) - creates it if necessary
     */
    public ROL getROL2() { 
       ROL ret = null;
       try {
          ret = (ROL)this.get("ROL2");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of ROL2
     * (Role) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public ROL getROL2(int rep) throws HL7Exception { 
       return (ROL)this.get("ROL2", rep);
    }

    /** 
     * Returns the number of existing repetitions of ROL2 
     */ 
    public int getROL2Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("ROL2").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of ROL2
     * (Role)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertROL2(ROL structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of ROL2
     * (Role)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public ROL insertROL2(int rep) throws HL7Exception { 
       return (ROL)super.insertRepetition("ROL2", rep);
    }

    /**
     * Removes a specific repetition of ROL2
     * (Role)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public ROL removeROL2(int rep) throws HL7Exception { 
       return (ROL)super.removeRepetition("ROL2", rep);
    }

    /**
     * Returns  first repetition of DB1 (Disability) - creates it if necessary
     */
    public DB1 getDB1() { 
       DB1 ret = null;
       try {
          ret = (DB1)this.get("DB1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of DB1
     * (Disability) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public DB1 getDB1(int rep) throws HL7Exception { 
       return (DB1)this.get("DB1", rep);
    }

    /** 
     * Returns the number of existing repetitions of DB1 
     */ 
    public int getDB1Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("DB1").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of DB1
     * (Disability)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertDB1(DB1 structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of DB1
     * (Disability)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public DB1 insertDB1(int rep) throws HL7Exception { 
       return (DB1)super.insertRepetition("DB1", rep);
    }

    /**
     * Removes a specific repetition of DB1
     * (Disability)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public DB1 removeDB1(int rep) throws HL7Exception { 
       return (DB1)super.removeRepetition("DB1", rep);
    }

    /**
     * Returns  first repetition of OBX (Observation/Result) - creates it if necessary
     */
    public OBX getOBX() { 
       OBX ret = null;
       try {
          ret = (OBX)this.get("OBX");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of OBX
     * (Observation/Result) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public OBX getOBX(int rep) throws HL7Exception { 
       return (OBX)this.get("OBX", rep);
    }

    /** 
     * Returns the number of existing repetitions of OBX 
     */ 
    public int getOBXReps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("OBX").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of OBX
     * (Observation/Result)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertOBX(OBX structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of OBX
     * (Observation/Result)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public OBX insertOBX(int rep) throws HL7Exception { 
       return (OBX)super.insertRepetition("OBX", rep);
    }

    /**
     * Removes a specific repetition of OBX
     * (Observation/Result)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public OBX removeOBX(int rep) throws HL7Exception { 
       return (OBX)super.removeRepetition("OBX", rep);
    }

    /**
     * Returns  first repetition of AL1 (Patient Allergy Information) - creates it if necessary
     */
    public AL1 getAL1() { 
       AL1 ret = null;
       try {
          ret = (AL1)this.get("AL1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of AL1
     * (Patient Allergy Information) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public AL1 getAL1(int rep) throws HL7Exception { 
       return (AL1)this.get("AL1", rep);
    }

    /** 
     * Returns the number of existing repetitions of AL1 
     */ 
    public int getAL1Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("AL1").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of AL1
     * (Patient Allergy Information)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertAL1(AL1 structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of AL1
     * (Patient Allergy Information)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public AL1 insertAL1(int rep) throws HL7Exception { 
       return (AL1)super.insertRepetition("AL1", rep);
    }

    /**
     * Removes a specific repetition of AL1
     * (Patient Allergy Information)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public AL1 removeAL1(int rep) throws HL7Exception { 
       return (AL1)super.removeRepetition("AL1", rep);
    }

    /**
     * Returns  first repetition of DG1 (Diagnosis) - creates it if necessary
     */
    public DG1 getDG1() { 
       DG1 ret = null;
       try {
          ret = (DG1)this.get("DG1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of DG1
     * (Diagnosis) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public DG1 getDG1(int rep) throws HL7Exception { 
       return (DG1)this.get("DG1", rep);
    }

    /** 
     * Returns the number of existing repetitions of DG1 
     */ 
    public int getDG1Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("DG1").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of DG1
     * (Diagnosis)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertDG1(DG1 structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of DG1
     * (Diagnosis)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public DG1 insertDG1(int rep) throws HL7Exception { 
       return (DG1)super.insertRepetition("DG1", rep);
    }

    /**
     * Removes a specific repetition of DG1
     * (Diagnosis)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public DG1 removeDG1(int rep) throws HL7Exception { 
       return (DG1)super.removeRepetition("DG1", rep);
    }

    /**
     * Returns DRG (Diagnosis Related Group) - creates it if necessary
     */
    public DRG getDRG() { 
       DRG ret = null;
       try {
          ret = (DRG)this.get("DRG");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns  first repetition of ADT_A01_PROCEDURE (a Group object) - creates it if necessary
     */
    public ADT_A01_PROCEDURE getPROCEDURE() { 
       ADT_A01_PROCEDURE ret = null;
       try {
          ret = (ADT_A01_PROCEDURE)this.get("PROCEDURE");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of ADT_A01_PROCEDURE
     * (a Group object) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public ADT_A01_PROCEDURE getPROCEDURE(int rep) throws HL7Exception { 
       return (ADT_A01_PROCEDURE)this.get("PROCEDURE", rep);
    }

    /** 
     * Returns the number of existing repetitions of ADT_A01_PROCEDURE 
     */ 
    public int getPROCEDUREReps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("PROCEDURE").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of ADT_A01_PROCEDURE
     * (a Group object)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertPROCEDURE(ADT_A01_PROCEDURE structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of ADT_A01_PROCEDURE
     * (a Group object)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public ADT_A01_PROCEDURE insertPROCEDURE(int rep) throws HL7Exception { 
       return (ADT_A01_PROCEDURE)super.insertRepetition("PROCEDURE", rep);
    }

    /**
     * Removes a specific repetition of ADT_A01_PROCEDURE
     * (a Group object)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public ADT_A01_PROCEDURE removePROCEDURE(int rep) throws HL7Exception { 
       return (ADT_A01_PROCEDURE)super.removeRepetition("PROCEDURE", rep);
    }

    /**
     * Returns  first repetition of GT1 (Guarantor) - creates it if necessary
     */
    public GT1 getGT1() { 
       GT1 ret = null;
       try {
          ret = (GT1)this.get("GT1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of GT1
     * (Guarantor) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public GT1 getGT1(int rep) throws HL7Exception { 
       return (GT1)this.get("GT1", rep);
    }

    /** 
     * Returns the number of existing repetitions of GT1 
     */ 
    public int getGT1Reps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("GT1").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of GT1
     * (Guarantor)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertGT1(GT1 structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of GT1
     * (Guarantor)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public GT1 insertGT1(int rep) throws HL7Exception { 
       return (GT1)super.insertRepetition("GT1", rep);
    }

    /**
     * Removes a specific repetition of GT1
     * (Guarantor)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public GT1 removeGT1(int rep) throws HL7Exception { 
       return (GT1)super.removeRepetition("GT1", rep);
    }

    /**
     * Returns  first repetition of ADT_A01_INSURANCE (a Group object) - creates it if necessary
     */
    public ADT_A01_INSURANCE getINSURANCE() { 
       ADT_A01_INSURANCE ret = null;
       try {
          ret = (ADT_A01_INSURANCE)this.get("INSURANCE");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns a specific repetition of ADT_A01_INSURANCE
     * (a Group object) - creates it if necessary
     * @throws HL7Exception if the repetition requested is more than one 
     *     greater than the number of existing repetitions.
     */
    public ADT_A01_INSURANCE getINSURANCE(int rep) throws HL7Exception { 
       return (ADT_A01_INSURANCE)this.get("INSURANCE", rep);
    }

    /** 
     * Returns the number of existing repetitions of ADT_A01_INSURANCE 
     */ 
    public int getINSURANCEReps() { 
        int reps = -1; 
        try { 
            reps = this.getAll("INSURANCE").length; 
        } catch (HL7Exception e) { 
            String message = "Unexpected error accessing data - this is probably a bug in the source code generator."; 
            HapiLogFactory.getHapiLog(this.getClass()).error(message, e); 
            throw new RuntimeException(message);
        } 
        return reps; 
    } 

    /**
     * Inserts a specific repetition of ADT_A01_INSURANCE
     * (a Group object)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public void  insertINSURANCE(ADT_A01_INSURANCE structure, int rep) throws HL7Exception { 
       super.insertRepetition( structure, rep);
    }

    /**
     * Inserts a specific repetition of ADT_A01_INSURANCE
     * (a Group object)
     * @see AbstractGroup#insertRepetition(Structure, int) 
     */
    public ADT_A01_INSURANCE insertINSURANCE(int rep) throws HL7Exception { 
       return (ADT_A01_INSURANCE)super.insertRepetition("INSURANCE", rep);
    }

    /**
     * Removes a specific repetition of ADT_A01_INSURANCE
     * (a Group object)
     * @see AbstractGroup#insertremoveRepetition(String, int) 
     */
    public ADT_A01_INSURANCE removeINSURANCE(int rep) throws HL7Exception { 
       return (ADT_A01_INSURANCE)super.removeRepetition("INSURANCE", rep);
    }

    /**
     * Returns ACC (Accident) - creates it if necessary
     */
    public ACC getACC() { 
       ACC ret = null;
       try {
          ret = (ACC)this.get("ACC");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns UB1 (UB82) - creates it if necessary
     */
    public UB1 getUB1() { 
       UB1 ret = null;
       try {
          ret = (UB1)this.get("UB1");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns UB2 (UB92 Data) - creates it if necessary
     */
    public UB2 getUB2() { 
       UB2 ret = null;
       try {
          ret = (UB2)this.get("UB2");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

    /**
     * Returns PDA (Patient Death and Autopsy) - creates it if necessary
     */
    public PDA getPDA() { 
       PDA ret = null;
       try {
          ret = (PDA)this.get("PDA");
       } catch(HL7Exception e) {
          HapiLogFactory.getHapiLog(this.getClass()).error("Unexpected error accessing data - this is probably a bug in the source code generator.", e);
          throw new RuntimeException(e);
       }
       return ret;
    }

}
