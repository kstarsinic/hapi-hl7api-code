/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JmsInterfaceForm.java
 *
 * Created on 9-Oct-2009, 7:30:51 PM
 */

package ca.uhn.hunit.swing.ui.iface;

import ca.uhn.hunit.iface.JmsInterfaceImpl;
import ca.uhn.hunit.l10n.Colours;
import ca.uhn.hunit.swing.controller.ctx.JmsInterfaceContextController;
import ca.uhn.hunit.swing.ui.AbstractContextForm;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;

/**
 *
 * @author James
 */
public class JmsInterfaceForm extends AbstractContextForm<JmsInterfaceContextController> {

    private static final long serialVersionUID = 1;

    /** Creates new form JmsInterfaceForm */
    public JmsInterfaceForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        myQueueNameTextBox = new javax.swing.JTextField();
        myQueueTopicCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        myConnectionFactoryTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        myUsernameTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        myPasswordTextBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        myConstructorArgsScrollBox = new javax.swing.JScrollPane();
        myConstructorArgsTable = new javax.swing.JTable();

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Username");

        myQueueNameTextBox.setText("jTextField1");

        myQueueTopicCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Queue", "Topic" }));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Connecton Factory");

        myConnectionFactoryTextBox.setText("jTextField2");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Username");

        myUsernameTextBox.setText("jTextField1");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Password");

        myPasswordTextBox.setText("jTextField1");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Constructor Args");

        myConstructorArgsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Value", "Type"
            }
        ));
        myConstructorArgsScrollBox.setViewportView(myConstructorArgsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(myQueueTopicCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 120, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myConstructorArgsScrollBox, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(myConnectionFactoryTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(myQueueNameTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myUsernameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(myPasswordTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myQueueNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myQueueTopicCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myConnectionFactoryTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(myUsernameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(myPasswordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myConstructorArgsScrollBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addGap(60, 60, 60)))
                .addGap(138, 138, 138))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField myConnectionFactoryTextBox;
    private javax.swing.JScrollPane myConstructorArgsScrollBox;
    private javax.swing.JTable myConstructorArgsTable;
    private javax.swing.JTextField myPasswordTextBox;
    private javax.swing.JTextField myQueueNameTextBox;
    private javax.swing.JComboBox myQueueTopicCombo;
    private javax.swing.JTextField myUsernameTextBox;
    // End of variables declaration//GEN-END:variables


    public void setController(JmsInterfaceContextController theController) {
        final JmsInterfaceImpl model = theController.getModel();
        
        myConstructorArgsTable.setModel(model.getConstructorArgsTableModel());

        myConnectionFactoryTextBox.setText(model.getConnectionFactoryClass().getCanonicalName());
        myConnectionFactoryTextBox.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent e) {
                try {
                    model.setConnectionFactoryClass(Class.forName(myConnectionFactoryTextBox.getText()));
                    myConnectionFactoryTextBox.setBackground(Colours.getTextFieldOk());
                } catch (ClassNotFoundException ex) {
                    myConnectionFactoryTextBox.setBackground(Colours.getTextFieldError());
                }
            }
        });

        myUsernameTextBox.setText(model.getUsername());
        myUsernameTextBox.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent e) {
                model.setUsername(myUsernameTextBox.getText());
            }
        });

        myPasswordTextBox.setText(model.getPassword());
        myPasswordTextBox.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent e) {
                model.setPassword(myPasswordTextBox.getText());
            }
        });

        myQueueNameTextBox.setText(model.getQueueName());
        myQueueNameTextBox.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent e) {
                try {
                    model.setQueueName(myQueueNameTextBox.getText());
                    myQueueNameTextBox.setBackground(Colours.getTextFieldOk());
                } catch (PropertyVetoException ex) {
                    myQueueNameTextBox.setBackground(Colours.getTextFieldError());
                }
            }
        });

        myQueueTopicCombo.setSelectedIndex(model.isPubSubDomain() ? 1 : 0);
        myQueueTopicCombo.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                model.setPubSubDomain(myQueueTopicCombo.getSelectedIndex() == 1);
            }
        });
    }

    public void tearDown() {

    }




}
