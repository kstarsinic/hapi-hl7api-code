/**
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the
 * specific language governing rights and limitations under the License.
 *
 * The Initial Developer of the Original Code is University Health Network. Copyright (C)
 * 2001.  All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License (the  "GPL"), in which case the provisions of the GPL are
 * applicable instead of those above.  If you wish to allow use of your version of this
 * file only under the terms of the GPL and not to allow others to use your version
 * of this file under the MPL, indicate your decision by deleting  the provisions above
 * and replace  them with the notice and other provisions required by the GPL License.
 * If you do not delete the provisions above, a recipient may use your version of
 * this file under either the MPL or the GPL.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SwingRunner.java
 *
 * Created on 22-Jul-2009, 10:57:14 PM
 */
package ca.uhn.hunit.swing.ui;

import ca.uhn.hunit.iface.JmsInterfaceImpl;

import ca.uhn.hunit.iface.MllpHl7V2InterfaceImpl;
import ca.uhn.hunit.msg.Hl7V2MessageImpl;
import ca.uhn.hunit.swing.controller.ctx.AbstractContextController;
import ca.uhn.hunit.swing.controller.ctx.Hl7V2MessageEditorController;
import ca.uhn.hunit.swing.controller.ctx.JmsInterfaceContextController;
import ca.uhn.hunit.swing.controller.ctx.MllpHl7v2InterfaceEditorContextController;
import ca.uhn.hunit.swing.controller.SwingRunnerController;
import ca.uhn.hunit.swing.controller.ctx.TestEditorController;
import ca.uhn.hunit.swing.model.InterfaceTreeNode;
import ca.uhn.hunit.swing.model.InterfacesTreeRenderer;
import ca.uhn.hunit.swing.model.MessageTreeNode;
import ca.uhn.hunit.swing.model.MyTreeModel;
import ca.uhn.hunit.swing.model.TestTreeNode;
import ca.uhn.hunit.test.TestBatteryImpl;
import ca.uhn.hunit.test.TestImpl;
import java.awt.BorderLayout;
import java.util.Enumeration;
import javax.swing.JPanel;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author James
 */
public class SwingRunner extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    private TestBatteryImpl myBattery;
    private final SwingRunnerController myController;
    private final MyTreeModel myTreeModel;

    /** Creates new form SwingRunner
     * @param theBatteryImpl */
    public SwingRunner(SwingRunnerController theController, TestBatteryImpl theBatteryImpl) {
        this.myBattery = theBatteryImpl;
        this.myController = theController;

        initComponents();

        myTreeModel = new MyTreeModel(myBattery);
        myTestTree.setModel(myTreeModel);
        myTestTree.setCellRenderer(new InterfacesTreeRenderer());
        
        ((BasicSplitPaneUI) myOuterSplitPane.getUI()).getDivider().setBorder(null);

        expandTreeModel(myTreeModel.getBatteryRoot());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myAddPopupMenu = new javax.swing.JPopupMenu();
        myAddTestMenu = new javax.swing.JMenu();
        myAddTestEmptyMenuItem = new javax.swing.JMenuItem();
        myAddMessageMenu = new javax.swing.JMenu();
        myAddMessageHl7V2 = new javax.swing.JMenuItem();
        myAddMessageXml = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        myButtonOpen = new javax.swing.JButton();
        myButtonSave = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        myExecuteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        myOuterSplitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTestTree = new javax.swing.JTree();
        jToolBar2 = new javax.swing.JToolBar();
        myAddButton = new javax.swing.JButton();
        myTestContextPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        myFileMenu = new javax.swing.JMenu();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ca/uhn/hunit/l10n/UiStrings"); // NOI18N
        myAddTestMenu.setText(bundle.getString("batterylist.buttons.add.test")); // NOI18N

        myAddTestEmptyMenuItem.setText(bundle.getString("batterylist.buttons.add.test.empty")); // NOI18N
        myAddTestMenu.add(myAddTestEmptyMenuItem);

        myAddPopupMenu.add(myAddTestMenu);

        myAddMessageMenu.setText(bundle.getString("batterylist.buttons.add.message")); // NOI18N

        myAddMessageHl7V2.setText(bundle.getString("batterylist.buttons.add.message.hl7v2")); // NOI18N
        myAddMessageHl7V2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAddMessageHl7V2ActionPerformed(evt);
            }
        });
        myAddMessageMenu.add(myAddMessageHl7V2);

        myAddMessageXml.setText(bundle.getString("batterylist.buttons.add.message.xml")); // NOI18N
        myAddMessageXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAddMessageXmlActionPerformed(evt);
            }
        });
        myAddMessageMenu.add(myAddMessageXml);

        myAddPopupMenu.add(myAddMessageMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        myButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ca/uhn/hunit/ui/resources/images/open.png"))); // NOI18N
        myButtonOpen.setText(bundle.getString("toolbar.open")); // NOI18N
        myButtonOpen.setFocusable(false);
        myButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        myButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(myButtonOpen);

        myButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ca/uhn/hunit/ui/resources/images/save.png"))); // NOI18N
        myButtonSave.setText(bundle.getString("toolbar.save")); // NOI18N
        myButtonSave.setFocusable(false);
        myButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        myButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(myButtonSave);
        jToolBar1.add(jSeparator2);

        myExecuteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ca/uhn/hunit/ui/resources/images/button_execute.png"))); // NOI18N
        myExecuteButton.setText(bundle.getString("toolbar.execute")); // NOI18N
        myExecuteButton.setFocusable(false);
        myExecuteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        myExecuteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        myExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myExecuteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(myExecuteButton);
        jToolBar1.add(jSeparator1);

        myOuterSplitPane.setBorder(null);
        myOuterSplitPane.setDividerLocation(200);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("runner.battery.panel"))); // NOI18N

        myTestTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                myTestTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(myTestTree);

        jToolBar2.setBorder(null);
        jToolBar2.setRollover(true);

        myAddButton.setText(bundle.getString("batterylist.buttons.add")); // NOI18N
        myAddButton.setFocusable(false);
        myAddButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        myAddButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        myAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAddButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(myAddButton);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );

        myOuterSplitPane.setLeftComponent(jPanel1);

        myTestContextPanel.setLayout(new java.awt.BorderLayout());
        myOuterSplitPane.setRightComponent(myTestContextPanel);

        myFileMenu.setMnemonic('F');
        myFileMenu.setText("File");
        jMenuBar1.add(myFileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(myOuterSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myOuterSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myTestTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_myTestTreeValueChanged
        Object selectedModelObject = evt.getPath().getLastPathComponent();
        AbstractContextController<?> ctxController = null;

        if (selectedModelObject instanceof InterfaceTreeNode) {
            InterfaceTreeNode interfaceTreeNode = (InterfaceTreeNode) selectedModelObject;
            if (interfaceTreeNode.getUserObject() instanceof MllpHl7V2InterfaceImpl) {
                ctxController = new MllpHl7v2InterfaceEditorContextController((MllpHl7V2InterfaceImpl) interfaceTreeNode.getUserObject());
            } else if (interfaceTreeNode.getUserObject() instanceof JmsInterfaceImpl) {
                ctxController = new JmsInterfaceContextController((JmsInterfaceImpl) interfaceTreeNode.getUserObject());
            } else {
                System.out.println("Unknown interface: " + selectedModelObject);
            }
        } else if (selectedModelObject instanceof MessageTreeNode) {
            MessageTreeNode treeNode = (MessageTreeNode) selectedModelObject;
            if (treeNode.getUserObject() instanceof Hl7V2MessageImpl) {
                ctxController = new Hl7V2MessageEditorController((Hl7V2MessageImpl) treeNode.getUserObject());
            } else {
                System.out.println("Unknown message: " + selectedModelObject);
            }
        } else if (selectedModelObject instanceof TestTreeNode) {
            TestTreeNode treeNode = (TestTreeNode) selectedModelObject;
            TestImpl test = (TestImpl) treeNode.getUserObject();
            ctxController = new TestEditorController(test);
        } else {
            System.out.println(selectedModelObject);
        }
        setContextController(ctxController);

    }//GEN-LAST:event_myTestTreeValueChanged

    private void myExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myExecuteButtonActionPerformed
        myController.execute();
    }//GEN-LAST:event_myExecuteButtonActionPerformed

    private void myAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAddButtonActionPerformed
        myAddPopupMenu.show(myAddButton, 0, myAddButton.getHeight());
    }//GEN-LAST:event_myAddButtonActionPerformed

    private void myAddMessageHl7V2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAddMessageHl7V2ActionPerformed
        myController.addMessageHl7V2();
    }//GEN-LAST:event_myAddMessageHl7V2ActionPerformed

    private void myAddMessageXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAddMessageXmlActionPerformed
        myController.addMessageXml();
    }//GEN-LAST:event_myAddMessageXmlActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton myAddButton;
    private javax.swing.JMenuItem myAddMessageHl7V2;
    private javax.swing.JMenu myAddMessageMenu;
    private javax.swing.JMenuItem myAddMessageXml;
    private javax.swing.JPopupMenu myAddPopupMenu;
    private javax.swing.JMenuItem myAddTestEmptyMenuItem;
    private javax.swing.JMenu myAddTestMenu;
    private javax.swing.JButton myButtonOpen;
    private javax.swing.JButton myButtonSave;
    private javax.swing.JButton myExecuteButton;
    private javax.swing.JMenu myFileMenu;
    private javax.swing.JSplitPane myOuterSplitPane;
    private javax.swing.JPanel myTestContextPanel;
    private javax.swing.JTree myTestTree;
    // End of variables declaration//GEN-END:variables

    public void setContextController(AbstractContextController<?> ctxController) {
        myTestContextPanel.removeAll();
        if (ctxController != null) {
            final JPanel view = ctxController.getView();
            myTestContextPanel.add(view, BorderLayout.CENTER);
        }
        validate();
    }

    private void expandTreeModel(TreeNode root) {
        myTestTree.expandPath(new TreePath(myTreeModel.getPathToRoot(root)));

        for (Enumeration enumeration = root.children(); enumeration.hasMoreElements(); ) {
            expandTreeModel((TreeNode) enumeration.nextElement());
        }
    }
}
