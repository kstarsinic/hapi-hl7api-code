<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>HL7 over HTTP - Creating a Client Keystore</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>
			<!-- 
		    keytool -genseckey -keyalg AES -keysize 256 -storetype jceks -keystore symmetrickey.jks -alias newkey -storepass thestorepass -keypass thekeypass
		    -->

	<body>

		<section name="Creating a Client Keystore">

			<p>
				If you are planning on sending messages to a system
				which is capable of using TLS/SSL, but the receiving
				system is using a private key which is self-signed, or which
				has been signed by a 
				<a href="http://en.wikipedia.org/wiki/Certificate_authority">Certificate Authority (CA)</a> 
				which is not publically well known, you will need to create a keystore
				which contains a certificate.
			</p>
		   
		   	<p>
		   		This keystore can be used by the HL7 over HTTP library or the Relay
		   		to communicate with a receiving system securely.
		   	</p>
		   
		   <subsection name="Importing a Public Key into a Keystore">
		   	
		   	<p>
		   		The person you will be sending messages to first needs to provide
		   		you with a public key (certificate) that you can use to send them
		   		messages. This will commonly be in a format called
		   		<a href="http://en.wikipedia.org/wiki/Privacy_Enhanced_Mail">PEM</a>. PEM
		   		files begin and end with a special delimiter line and consist of
		   		a body of Base-64 encoded binary.
		   	</p>
		   	
		   	<p>
		   		The following is an example of what a PEM file should look like:<br/>
		   		<code>
					-----BEGIN CERTIFICATE-----<br/>
					MIIDdzCCAl+gAwIBAgIETWBDIDANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdVbmtub3duMRAw<br/>
					DgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYDVQQKEwdVbmtub3duMRAwDgYD<br/>
					<span style="color: #808080;">... some lines removed ...</span><br/>
					4UJdLAICuodKr1YNzWOi+qu/C/toHkGIH3qqFlBwxYv+03VFy1ZeqqSFOS4yVZReXrNP9dpvIkcs<br/>
					G9w7mJXpRj444RtF+sKQ15WYs7MmABnIrv9r/+mVbgXO1yawhEzc4rt4m/T5tGpiAE485mGUwZzo<br/>
					7/5nr32KlhSkexwwuZCDpuzm3FC36g+puzVLUic32S1GZ50Z<br/>
					-----END CERTIFICATE-----
		   		</code>
		   	</p>
		   	
		   	<p>
		   		The key may also be in a format known as DER, which is a binary
		   		format. To import a key file in either PEM or DER format into a 
		   		keystore, issue the following command. The following arguments should
		   		be substituted for something appropriate:
		   	</p>
		   	<ul>
		   		<li>
		   			<code>-alias <span style="color: #E06060;">trust_app_alias</span></code> refers to the name
		   			by which the key will be known to the keystore. It generaly doesn't matter what
		   			you put here as long as you choose something meaningful to the 
		   			certificate you are putting in.
		   		</li>
		   		<li>
		   			<code>-file <span style="color: #E06060;">public.cert</span></code> refers to the filename of
		   			the certificate. This file should be in one of the formats listed above.
		   		</li>
		   		<li>
		   			<code>-keystore <span style="color: #E06060;">keystore.jks</span></code> refers to the
		   			name of the keystore you are putting the key in. If no file exists with 
		   			this name, one will be created and given the keystore password that you 
		   			specify at the prompt below. If this keystore already exists, the new
		   			certificate will be added to it, and the password you enter must match
		   			the password that this keystore was previously given.
		   		</li>
		   	</ul>
		   	
		   	<div style="background: #E0E0E0; padding: 20px;">
					$ <span style="color: #E06060;">keytool -import -alias trust_app_alias -file public.cert -keystore truststore.jks -storetype JKS</span><br/>
					Enter keystore password:  <span style="color: #E06060;">trustpassword</span><br/>
					Re-enter new password: <span style="color: #E06060;">trustpassword</span><br/>
					Owner: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown<br/>
					Issuer: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown<br/>
					Serial number: 50257625<br/>
					Valid from: Fri Aug 10 16:59:17 EDT 2012 until: Thu Aug 10 16:59:17 EDT 2017<br/>
					Certificate fingerprints:<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MD5:  B9:5B:43:34:CA:00:82:EE:1F:7B:24:14:B6:3E:56:09<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1: 98:56:ED:0B:E0:F2:A6:20:2D:DD:66:72:5F:DF:7D:CB:BC:98:C7:AE<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Signature algorithm name: SHA1withRSA<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version: 3<br/>
					Trust this certificate? [no]:  <span style="color: #E06060;">yes</span><br/>
					Certificate was added to keystore<br/>
				</div>		   	
		   	
		   	
		   </subsection>
		   
		</section>

	</body>

</document>
